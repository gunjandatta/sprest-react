// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../office-ui-fabric-react
//   ../gd-sprest
//   ../gd-sprest-def

declare module 'gd-sprest-react' {
    import * as Components from "gd-sprest-react/components/types";
    import * as Fields from "gd-sprest-react/fields/types";
    import * as WebParts from "gd-sprest-react/webparts/types";
    export {
        Components,
        Fields,
        WebParts
    }
}

declare module 'gd-sprest-react/components/types' {
    export * from "gd-sprest-react/components/types/basePanel";
    export * from "gd-sprest-react/components/types/itemForm";
    export * from "gd-sprest-react/components/types/peoplePicker";
}

declare module 'gd-sprest-react/fields/types' {
    export * from "gd-sprest-react/fields/types/baseField";
    export * from "gd-sprest-react/fields/types/fieldAttachments";
    export * from "gd-sprest-react/fields/types/fieldBoolean";
    export * from "gd-sprest-react/fields/types/fieldChoice";
    export * from "gd-sprest-react/fields/types/fieldDateTime";
    export * from "./fieldLookup"
    export * from "gd-sprest-react/fields/types/fieldManagedMetadata";
    export * from "./fieldNumber"
    export * from "gd-sprest-react/fields/types/fieldText";
    export * from "gd-sprest-react/fields/types/fieldUrl";
    export * from "gd-sprest-react/fields/types/fieldUser";
}

declare module 'gd-sprest-react/webparts/types' {
    export * from "gd-sprest-react/webparts/types/wp";
    export * from "gd-sprest-react/webparts/types/wpList";
    export * from "gd-sprest-react/webparts/types/wpSearch";
    export * from "gd-sprest-react/webparts/types/wpTabs";
    
    export * from "gd-sprest-react/webparts/types/wpCfg";
    export * from "gd-sprest-react/webparts/types/wpListCfg";
    export * from "gd-sprest-react/webparts/types/wpFieldCfg";
    export * from "gd-sprest-react/webparts/types/wpSearchCfg";
}

declare module 'gd-sprest-react/components/types/basePanel' {
    import { IPanelProps } from "office-ui-fabric-react";
    
    /**
        * Base Panel Properties
        */
    export interface IBasePanelProps extends IPanelProps {
            ref?: (panel: any) => void;
    }
    
    /**
        * Base Panel State
        */
    export interface IBasePanelState {
            visible?: boolean;
    }
    
    /**
        * Base Panel
        */
    export interface IBasePanel<Props extends IBasePanelProps = IBasePanelProps, State extends IBasePanelState = IBasePanelState> { }
}

declare module 'gd-sprest-react/components/types/itemForm' {
    import { Types } from "gd-sprest";
    import { IAttachmentFile } from "gd-sprest-react/fields/types";
    
    /**
        * Field Information
        */
    export interface IItemFormField {
            /** The form control mode. */
            controlMode?: number;
    
            /** The field name. */
            name: string;
    
            /** The on change event */
            onChange?: (value: any) => void;
    
            /** The on render method */
            onRender?: (fieldInfo: Types.Helper.IListFormFieldInfo) => JSX.Element;
    }
    
    /**
        * Properties
        */
    export interface IItemFormProps {
            /** If defined, the form data will be cached to the session storage. */
            cacheKey?: string;
    
            /** The class name to apply to the item form element. */
            className?: string;
    
            /** The form control mode. */
            controlMode?: number;
    
            /** The form fields to exclude from the form. */
            excludeFields?: Array<string>;
    
            /** The field class name to apply to the field elements. */
            fieldClassName?: string;
    
            /** The form fields. */
            fields?: Array<IItemFormField>;
    
            /** The existing item. */
            item?: any;
    
            /** The item id */
            itemId?: number;
    
            /** The list display name. */
            listName: string;
    
            /** The attachment added event. */
            onAttachmentAdded?: (file: IAttachmentFile) => void;
    
            /** The click event for the attachment. */
            onAttachmentClick?: (file: IAttachmentFile, controlMode: number) => void;
    
            /** The render event for the attachment. */
            onAttachmentRender?: (file: IAttachmentFile, controlMode: number) => any;
    
            /** The field render event */
            onFieldRender?: (fieldInfo: Types.Helper.IListFormFieldInfo, field: JSX.Element) => any;
    
            /** The on form render event. */
            onRender?: (controlMode: number) => any;
    
            /** The on form render attachments event. */
            onRenderAttachments?: (files: Array<IAttachmentFile>, controlMode: number) => any;
    
            /** The item query, used when refreshing the item after a save. */
            query?: Types.SP.ODataQuery;
    
            /** The max number of items to return for the lookup data queries. (Default: 500) */
            queryTop?: number;
    
            /** The form fields to make read-only in the form. */
            readOnlyFields?: Array<string>;
    
            /** Flag to display the attachments. */
            showAttachments?: boolean;
    
            /** The relative web url containing the list. */
            webUrl?: string;
    }
    
    /**
        * State
        */
    export interface IItemFormState {
            /** The form information */
            formInfo?: Types.Helper.IListFormResult;
    
            /** The item id. */
            itemId?: number;
    
            /** The form fields. */
            fields?: Array<IItemFormField>;
    
            /** The refresh flag. */
            refreshFl?: boolean;
    
            /** The save flag. */
            saveFl?: boolean;
    
            /** The update flag. */
            updateFl?: boolean;
    }
}

declare module 'gd-sprest-react/components/types/peoplePicker' {
    import { SP } from "gd-sprest-def";
    import { IPeoplePickerProps, IPersonaProps } from "office-ui-fabric-react";
    
    /**
        * Properties
        */
    export interface ISPPeoplePickerProps {
            allowMultiple?: boolean;
            allowGroups?: boolean;
            fieldValue?: Array<SP.Data.UserInfoItem> | Array<number>;
            props?: IPeoplePickerProps;
            webUrl?: string;
    }
    
    /**
        * State
        */
    export interface ISPPeoplePickerState {
            allowGroups?: boolean;
            fieldValue?: number | Array<number>;
            personas?: Array<IPersonaProps>;
    }
}

declare module 'gd-sprest-react/fields/types/baseField' {
    import { Types } from "gd-sprest";
    
    /**
        * Base Field Properties
        */
    export interface IBaseFieldProps {
            /** The class name. */
            className?: string;
    
            /** The field control mode. */
            controlMode?: number;
    
            /** The field information. */
            fieldInfo?: Types.Helper.IListFormFieldInfo;
    
            /** The default field value. */
            defaultValue?: any;
    
            /** The field. */
            field: Types.SP.IFieldResult | Types.SP.IFieldQueryResult;
    
            /** The list name containing the field. */
            listName: string;
    
            /** The field name. */
            name: string;
    
            /** The on change event */
            onChange?: (value: any) => void;
    
            /** The field render event. */
            onFieldRender?: (fieldInfo: Types.Helper.IListFormFieldInfo, field: JSX.Element) => any;
    
            /** The render event of the field component */
            onRender?: (fieldInfo: Types.Helper.IListFormFieldInfo) => any;
    
            /** The max number of items to return for the lookup data queries. (Default: 500) */
            queryTop?: number;
    
            /** Flag to show a loading indicator. The default value is true. */
            showLoadingFl?: boolean;
    
            /** The relative url of the web containing the field. */
            webUrl?: string;
    }
    
    /**
        * BaseField State
        */
    export interface IBaseFieldState {
            /** The field control mode. */
            controlMode?: number;
    
            /** The error message. */
            errorMessage?: string;
    
            /** The field information. */
            fieldInfo: Types.Helper.IListFormFieldInfo;
    
            /** Flag to determine if the field is initialized. */
            initFl?: boolean;
    
            /** The change event */
            onChange?: (value: any) => void;
    
            /** The current field value. */
            value?: any;
    
            /** Flag to show the error message. */
            showErrorMessage?: boolean;
    }
    
    export interface IBaseField<Props extends IBaseFieldProps, State extends IBaseFieldState> {
            /**
                * The render field event.
                */
            renderField: () => JSX.Element;
    
            /**
                * Method to get the field value.
                */
            getFieldValue: () => any;
    
            /**
                * Event triggered after loading the field information.
                */
            onFieldLoaded?: (info: any, state: IBaseFieldState) => void;
    
            /**
                * Method to update the value
                */
            updateValue: (value: any) => void;
    }
}

declare module 'gd-sprest-react/fields/types/fieldAttachments' {
    import { Types } from "gd-sprest";
    
    /**
        * Attachment File
        */
    export interface IAttachmentFile {
            // The file binary data
            data?: any;
    
            // The file extension
            ext: string;
    
            // The file name
            name: string;
    
            // The url to the file
            url?: string;
    }
    
    /**
        * Attachments Field Properties
        */
    export interface IFieldAttachmentsProps {
            /** The class name. */
            className?: string;
    
            /** The field control mode. */
            controlMode?: number;
    
            /** The item id. */
            itemId?: number;
    
            /** The list name. */
            listName: string;
    
            /** The existing attachment files. */
            files?: any | Types.SP.IAttachmentFiles;
    
            /** The attachments render event. */
            onAttachmentsRender?: (attachments: JSX.Element) => any;
    
            /** The attachment file added event. */
            onFileAdded?: (file: IAttachmentFile) => any;
    
            /** The click event for the file link. */
            onFileClick?: (file: IAttachmentFile) => void;
    
            /** The attachment file render event. */
            onFileRender?: (file: IAttachmentFile) => any;
    
            /** The on form render event. */
            onRender?: (files: Array<IAttachmentFile>) => any;
    
            /** The relative web url containing the list. */
            webUrl?: string;
    }
    
    /**
        * Attachments Field State
        */
    export interface IFieldAttachmentsState {
            /** Error Message */
            errorMessage?: string;
    
            /** The attachment files */
            files: {
                    // Files to Delete
                    Delete: Array<IAttachmentFile>;
    
                    // New Files
                    New: Array<IAttachmentFile>;
    
                    // Existing
                    Existing: Array<IAttachmentFile>;
            };
    
            /** The list information */
            listInfo: Types.Helper.IListFormResult;
    
            /** Loading Flag */
            loadingFl?: boolean;
    }
    
    /**
        * Attachments Field
        */
    export interface IFieldAttachment {
            /**
                * Refreshes the item attachments.
                */
            refresh: () => PromiseLike<void>;
    
            /**
                * Saves the item attachments.
             */
            save: () => PromiseLike<void>;
    
            /**
                * Displays the file upload dialog.
                */
            showFileDialog: () => void;
    }
}

declare module 'gd-sprest-react/fields/types/fieldBoolean' {
    import { ICheckboxProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * Boolean Field Properties
        */
    export interface IFieldBooleanProps extends IBaseFieldProps {
            /** Event triggered when the field value changes. */
            onChange?: (value: boolean) => void;
    
            /** The checkbox properties. */
            props?: ICheckboxProps;
    }
    
    /**
        * Boolean Field State
        */
    export interface IFieldBooleanState extends IBaseFieldState { }
    
    /**
        * Boolean Field
        */
    export interface IFieldBoolean extends IBaseField<IFieldBooleanProps, IFieldBooleanState> {}
}

declare module 'gd-sprest-react/fields/types/fieldChoice' {
    import { Types } from "gd-sprest";
    import { IDropdownOption, IDropdownProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * Choice Field Properties
        */
    export interface IFieldChoiceProps extends IBaseFieldProps {
            /** Event triggered when the field value changes. */
            onChange?: (value: IDropdownOption | Array<string | number>) => void;
    
            /** The dropdown properties. */
            props?: IDropdownProps;
    }
    
    /**
        * Choice Field State
        */
    export interface IFieldChoiceState extends IBaseFieldState {
            /** The field information */
            fieldInfo: Types.Helper.IListFormChoiceFieldInfo;
    
            /** The dropdown options. */
            options?: Array<IDropdownOption>;
    }
    
    /**
        * Choice Field
        */
    export interface IFieldChoice extends IBaseField<IFieldChoiceProps, IFieldChoiceState> {
            /**
                * Event triggered after the field information is retrieved from SharePoint.
                */
            onFieldLoaded: (fieldInfo: Types.Helper.IListFormChoiceFieldInfo, state: IFieldChoiceState) => void;
    }
}

declare module 'gd-sprest-react/fields/types/fieldDateTime' {
    import { Types } from "gd-sprest";
    import { IDatePickerProps, IDropdownOption, IDropdownProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * Date/Time Field Properties
        */
    export interface IFieldDateTimeProps extends IBaseFieldProps {
            /** Date picker properties. */
            dtProps?: IDatePickerProps;
    
            /** Event triggered when the field value changes. */
            onChange?: (value: Date) => void;
    
            /** Time dropdown list properties. */
            timeProps?: IDropdownProps;
    }
    
    /**
        * Date/Time Field State
        */
    export interface IFieldDateTimeState extends IBaseFieldState {
            /** The field information */
            fieldInfo: Types.Helper.IListFormDateFieldInfo;
    }
    
    /**
        * Date/Time Field
        */
    export interface IFieldDateTime extends IBaseField<IFieldDateTimeProps, IFieldDateTimeState> {
            /**
                * Event triggered after the field information is retrieved from SharePoint.
                */
            onFieldLoaded?: (info: any, state: IBaseFieldState) => void;
    }
}

declare module 'gd-sprest-react/fields/types/fieldManagedMetadata' {
    import { Types } from "gd-sprest";
    import { IDropdownOption, IDropdownProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * Managed Metadata Term Information
        */
    export interface IManagedMetadataTermInfo {
            id: string;
            name: string;
            path: string;
    }
    
    /**
        * Lookup Field Properties
        */
    export interface IFieldManagedMetadataProps extends IBaseFieldProps {
            /** Event triggered when the field value changes. */
            onChange?: (value: IDropdownOption | Array<string | number>) => void;
    
            /** The dropdown list properties. */
            props?: IDropdownProps;
    }
    
    /**
        * Lookup Field State
        */
    export interface IFieldManagedMetadataState extends IBaseFieldState {
            /** The field information */
            fieldInfo: Types.Helper.IListFormMMSFieldInfo;
    
            /** The dropdown options. */
            options?: Array<IDropdownOption>;
    
            /** The hidden value field. */
            valueField?: Types.SP.IFieldNote;
    }
    
    /**
        * Lookup Field
        */
    export interface IFieldManagedMetadata extends IBaseField<IFieldManagedMetadataProps, IFieldManagedMetadataState> {
            /**
                * Event triggered after the field information is retrieved from SharePoint.
                */
            onFieldLoaded?: (info: any, state: IBaseFieldState) => void;
    }
}

declare module 'gd-sprest-react/fields/types/fieldText' {
    import { Types } from "gd-sprest";
    import { ITextFieldProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * Text Field Properties
        */
    export interface IFieldTextProps extends IBaseFieldProps {
            /** Event triggered when the field value changes. */
            onChange?: (value: string) => void;
    
            /** The textfield properties. */
            props?: ITextFieldProps;
    }
    
    /**
        * Text Field State
        */
    export interface IFieldTextState extends IBaseFieldState {
            /** The field information */
            fieldInfo: Types.Helper.IListFormTextFieldInfo;
    }
    
    /**
        * Text Field
        */
    export interface IFieldText extends IBaseField<IFieldTextProps, IFieldTextState> {
            /**
                * Event triggered after the field information is retrieved from SharePoint.
                */
            onFieldLoaded?: (info: any, state: IBaseFieldState) => void;
    }
}

declare module 'gd-sprest-react/fields/types/fieldUrl' {
    import { SP } from "gd-sprest-def";
    import { ITextFieldProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * Url Field Properties
        */
    export interface IFieldUrlProps extends IBaseFieldProps {
            /** The description textfield properties. */
            descProps?: ITextFieldProps;
    
            /** Event triggered when the field value changes. */
            onChange?: (value: SP.FieldUrlValue) => void;
    
            /** The url textfield properties. */
            urlProps?: ITextFieldProps;
    }
    
    /**
        * Url Field State
        */
    export interface IFieldUrlState extends IBaseFieldState {
            /** The field value */
            value: SP.FieldUrlValue;
    }
    
    /**
        * Url Field
        */
    export interface IFieldUrl extends IBaseField<IFieldUrlProps, IFieldUrlState> { }
}

declare module 'gd-sprest-react/fields/types/fieldUser' {
    import { Types } from "gd-sprest";
    import { IPersonaProps, ILabelProps, IPeoplePickerProps } from "office-ui-fabric-react";
    import { IBaseField, IBaseFieldProps, IBaseFieldState } from "gd-sprest-react/fields/types";
    
    /**
        * User Field Properties
        */
    export interface IFieldUserProps extends IBaseFieldProps {
            /** The properties for the user field label. */
            lblProps?: ILabelProps;
    
            /** Event triggered when the field value changes. */
            onChange?: (value: number | Array<number>) => void;
    
            /** The properties of the people picker. */
            pickerProps?: IPeoplePickerProps;
    }
    
    /**
        * User Field State
        */
    export interface IFieldUserState extends IBaseFieldState {
            /** The field information */
            fieldInfo: Types.Helper.IListFormUserFieldInfo;
    }
    
    /**
        * User Field
        */
    export interface IFieldUser extends IBaseField<IFieldUserProps, IFieldUserState> {
            /**
                * Event triggered after the field information is retrieved from SharePoint.
                */
            onFieldLoaded?: (info: any, state: IBaseFieldState) => void;
    }
}

declare module 'gd-sprest-react/webparts/types/wp' {
    import { Types } from "gd-sprest";
    
    /**
        * Fabric Web Part Information
        */
    export interface IFabricWebPartInfo {
            cfg?: Types.Helper.IWebPartCfg;
    }
    
    /**
        * Fabric Web Part Properties
        */
    export interface IFabricWebPartProps {
            cfgElementId?: string;
            displayElement?: React.ComponentClass<any>;
            editElement?: React.ComponentClass<any>;
            helpTitle?: string;
            helpUrl?: string;
            onPostRender?: (targetInfo?: Types.Helper.IWebPartInfo) => void;
            onRenderDisplayElement?: (targetInfo: Types.Helper.IWebPartInfo) => any;
            onRenderEditElement?: (targetInfo: Types.Helper.IWebPartInfo) => any;
            targetElementId: string;
    }
}

declare module 'gd-sprest-react/webparts/types/wpList' {
    import { Types } from "gd-sprest";
    import { IWebPartListCfg } from "gd-sprest-react/webparts/types";
    
    /**
        * List Item
        */
    export interface IWebPartListItem extends Types.SP.IListItemQueryResult { }
    
    /**
        * List Properties
        */
    export interface IWebPartListProps {
            /** Flag to store the items in local cache. (False by default) */
            cacheItemsFl?: boolean;
    
            /** The number of seconds to refresh the cached items. (Default: 300) */
            cacheTimeout?: number;
    
            /** The webpart configuration. */
            cfg: IWebPartListCfg;
    
            /** The class name to apply to the webpart. */
            className?: string;
    }
    
    /**
        * List State
        */
    export interface IWebPartListState {
            items?: Array<IWebPartListItem>;
            lastRefresh?: Date;
    }
}

declare module 'gd-sprest-react/webparts/types/wpSearch' {
    import { ITag } from "office-ui-fabric-react";
    import {
            IWebPartListItem, IWebPartListProps, IWebPartListState,
            IWebPartSearchCfg
    } from ".";
    
    /**
        * Search Item
        */
    export interface IWebPartSearchItem extends IWebPartListItem {
            DocIcon?: string;
            FileRef?: string;
            LinkFilename?: string;
    }
    
    /**
        * Search Properties
        */
    export interface IWebPartSearchProps extends IWebPartListProps {
            cfg: IWebPartSearchCfg;
    }
    
    /**
        * Search State
        */
    export interface IWebPartSearchState extends IWebPartListState {
            items?: Array<IWebPartSearchItem>;
            searchFilter?: string;
            searchTerms?: Array<ITag>;
            selectedTags?: Array<ITag>;
            tagMapper?: { [key: string]: Array<IWebPartSearchItem> };
    }
}

declare module 'gd-sprest-react/webparts/types/wpTabs' {
    import { IPivotItemProps, IRenderFunction, PivotLinkFormat, PivotLinkSize } from "office-ui-fabric-react";
    import { IWebPartCfgProps } from "gd-sprest-react/webparts/types";
    
    /**
        * WebPart Tabs Props
        */
    export interface IWebPartTabsProps extends IWebPartCfgProps {
            className?: string;
            linkFormat?: PivotLinkFormat;
            linkSize?: PivotLinkSize;
            onRenderTab?: IRenderFunction<IPivotItemProps>;
    }
    
    /**
        * WebPart Tabs State
        */
    export interface IWebPartTabsState {
            selectedTabId: number;
            webparts: Array<HTMLDivElement>;
    }
}

declare module 'gd-sprest-react/webparts/types/wpCfg' {
    import { Types } from "gd-sprest";
    import { IBasePanel } from "gd-sprest-react/components/Types";
    
    /**
        * WebPart Configuration Panel
        */
    export interface IWebPartCfgPanel {
            _errorMessage: HTMLDivElement;
            _panel: IBasePanel;
    
            onRenderContents: (cfg: Types.Helper.IWebPartCfg) => JSX.Element | Array<JSX.Element>;
            onRenderFooter: () => JSX.Element | Array<JSX.Element>;
            onRenderHeader: () => JSX.Element | Array<JSX.Element>;
            saveConfiguration: (wpCfg: Types.Helper.IWebPartCfg) => void;
    }
    
    /**
        * WebPart Configuration Properties
        */
    export interface IWebPartCfgProps {
            cfg?: Types.Helper.IWebPartCfg;
            cfgElementId?: string;
    }
    
    /**
        * WebPart Configuration State
        */
    export interface IWebPartCfgState {
            cfg?: Types.Helper.IWebPartCfg;
    }
}

declare module 'gd-sprest-react/webparts/types/wpListCfg' {
    import { Types } from "gd-sprest";
    import {
            IDropdown, IDropdownOption,
            PrimaryButton,
            ITextField
    } from "office-ui-fabric-react";
    import { IWebPartCfgProps, IWebPartCfgState, IWebPartCfgPanel } from "gd-sprest-react/webparts/types";
    
    /**
        * List Configuration
        */
    export interface IWebPartListCfg extends Types.Helper.IWebPartCfg {
            ListName?: string;
            WebUrl?: string;
    }
    
    /**
        * List Configuration Panel
        */
    export interface IWebPartListCfgPanel extends IWebPartCfgPanel {
            _query: Types.SP.ODataQuery;
            _listDropdown: IDropdown;
            _refreshButton: PrimaryButton;
            _saveButton: PrimaryButton;
            _webUrl: ITextField;
    
            getList: (option: IDropdownOption) => Types.SP.IListQueryResult;
            onListChanged: (state: IWebPartListCfgState, option?: IDropdownOption, idx?: number) => void;
            onListsLoaded: (newState: IWebPartListCfgState) => void;
            onRefresh: (ev: React.MouseEvent<HTMLButtonElement>) => void;
            renderList: () => JSX.Element;
            renderSaveButton: () => JSX.Element;
            renderWebUrl: () => Array<JSX.Element>;
    }
    
    /**
        * List Configuration Properties
        */
    export interface IWebPartListCfgProps extends IWebPartCfgProps {
            cfg: IWebPartListCfg;
    }
    
    /**
        * List Configuration State
        */
    export interface IWebPartListCfgState extends IWebPartCfgState {
            cfg: IWebPartListCfg;
            lists?: Array<Types.SP.IListQueryResult>;
            loadFl?: boolean;
            options?: Array<IDropdownOption>;
            selectedList?: Types.SP.IListQueryResult;
    }
}

declare module 'gd-sprest-react/webparts/types/wpFieldCfg' {
    import { Types } from "gd-sprest";
    import { ILabel, ILabelProps, TagPicker, ITag, ITagPickerProps } from "office-ui-fabric-react";
    import {
            IWebPartListCfgPanel,
            IWebPartListCfg, IWebPartListCfgProps, IWebPartListCfgState
    } from ".";
    
    /**
        * Field Configuration
        */
    export interface IWebPartFieldCfg extends IWebPartListCfg {
            Fields?: Array<Types.SP.IFieldResult>;
    }
    
    /**
        * Field Configuration Panel
        */
    export interface IWebPartFieldCfgPanel extends IWebPartListCfgPanel {
            _fieldLabel: ILabel;
            _fieldPicker: TagPicker;
    
            onFieldPickerDisplay: (tags: Array<ITag>) => void;
            renderField: () => Array<JSX.Element>;
    }
    
    /**
        * Field Configuration Properties
        */
    export interface IWebPartFieldCfgProps extends IWebPartListCfgProps {
            cfg: IWebPartFieldCfg;
            fieldLabel?: ILabelProps;
            fieldPicker?: ITagPickerProps;
    }
    
    /**
        * Field Configuration State
        */
    export interface IWebPartFieldCfgState extends IWebPartListCfgState {
            cfg: IWebPartFieldCfg;
    }
}

declare module 'gd-sprest-react/webparts/types/wpSearchCfg' {
    import {
            IWebPartFieldCfg, IWebPartFieldCfgPanel, IWebPartFieldCfgProps, IWebPartFieldCfgState
    } from ".";
    
    /**
        * Search Configuration
        */
    export interface IWebPartSearchCfg extends IWebPartFieldCfg {
            TagPickerFl?: boolean;
    }
    
    /**
        * Search Configuration Panel
        */
    export interface IWebPartSearchCfgPanel extends IWebPartFieldCfgPanel {
            renderSearchPicker: () => JSX.Element;
    }
    
    /**
        * Search Configuration Properties
        */
    export interface IWebPartSearchCfgProps extends IWebPartFieldCfgProps {
            cfg: IWebPartSearchCfg;
    }
    
    /**
        * Search Configuration State
        */
    export interface IWebPartSearchCfgState extends IWebPartFieldCfgState {
            cfg: IWebPartSearchCfg;
    }
}

export * from "gd-sprest-react/components/Types/basePanel";
export * from "gd-sprest-react/components/Types/itemForm";
export * from "gd-sprest-react/components/Types/peoplePicker";

import { IPanelProps } from "office-ui-fabric-react";

/**
    * Base Panel Properties
    */
export interface IBasePanelProps extends IPanelProps {
        ref?: (panel: any) => void;
}

/**
    * Base Panel State
    */
export interface IBasePanelState {
        visible?: boolean;
}

/**
    * Base Panel
    */
export interface IBasePanel<Props extends IBasePanelProps = IBasePanelProps, State extends IBasePanelState = IBasePanelState> { }

import { Types } from "gd-sprest";
import { IAttachmentFile } from "gd-sprest-react/fields/types";

/**
    * Field Information
    */
export interface IItemFormField {
        /** The form control mode. */
        controlMode?: number;

        /** The field name. */
        name: string;

        /** The on change event */
        onChange?: (value: any) => void;

        /** The on render method */
        onRender?: (fieldInfo: Types.Helper.IListFormFieldInfo) => JSX.Element;
}

/**
    * Properties
    */
export interface IItemFormProps {
        /** If defined, the form data will be cached to the session storage. */
        cacheKey?: string;

        /** The class name to apply to the item form element. */
        className?: string;

        /** The form control mode. */
        controlMode?: number;

        /** The form fields to exclude from the form. */
        excludeFields?: Array<string>;

        /** The field class name to apply to the field elements. */
        fieldClassName?: string;

        /** The form fields. */
        fields?: Array<IItemFormField>;

        /** The existing item. */
        item?: any;

        /** The item id */
        itemId?: number;

        /** The list display name. */
        listName: string;

        /** The attachment added event. */
        onAttachmentAdded?: (file: IAttachmentFile) => void;

        /** The click event for the attachment. */
        onAttachmentClick?: (file: IAttachmentFile, controlMode: number) => void;

        /** The render event for the attachment. */
        onAttachmentRender?: (file: IAttachmentFile, controlMode: number) => any;

        /** The field render event */
        onFieldRender?: (fieldInfo: Types.Helper.IListFormFieldInfo, field: JSX.Element) => any;

        /** The on form render event. */
        onRender?: (controlMode: number) => any;

        /** The on form render attachments event. */
        onRenderAttachments?: (files: Array<IAttachmentFile>, controlMode: number) => any;

        /** The item query, used when refreshing the item after a save. */
        query?: Types.SP.ODataQuery;

        /** The max number of items to return for the lookup data queries. (Default: 500) */
        queryTop?: number;

        /** The form fields to make read-only in the form. */
        readOnlyFields?: Array<string>;

        /** Flag to display the attachments. */
        showAttachments?: boolean;

        /** The relative web url containing the list. */
        webUrl?: string;
}

/**
    * State
    */
export interface IItemFormState {
        /** The form information */
        formInfo?: Types.Helper.IListFormResult;

        /** The item id. */
        itemId?: number;

        /** The form fields. */
        fields?: Array<IItemFormField>;

        /** The refresh flag. */
        refreshFl?: boolean;

        /** The save flag. */
        saveFl?: boolean;

        /** The update flag. */
        updateFl?: boolean;
}

import { SP } from "gd-sprest-def";
import { IPeoplePickerProps, IPersonaProps } from "office-ui-fabric-react";

/**
    * Properties
    */
export interface ISPPeoplePickerProps {
        allowMultiple?: boolean;
        allowGroups?: boolean;
        fieldValue?: Array<SP.Data.UserInfoItem> | Array<number>;
        props?: IPeoplePickerProps;
        webUrl?: string;
}

/**
    * State
    */
export interface ISPPeoplePickerState {
        allowGroups?: boolean;
        fieldValue?: number | Array<number>;
        personas?: Array<IPersonaProps>;
}

